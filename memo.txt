コマンド手順
npx create-react-app frontend --template typescript
truffle init
code .

フォルダ説明
contracts 
.. contractを格納
migrations
.. デプロイの順番、デプロイの情報をJSで書く。
test
.. テストをJSで書く

ERC20参考サイト
https://ethereum.org/en/developers/docs/standards/tokens/erc-20/


--
truffle compile .. コンパイル  (buildフォルダ生成)
truffle develop → migrate → デプロイ (migrationsファイル参照してデプロイ)
--

・truffle compile 後に生成される build/contracts/*.json は
interfaceがjson化した様なもの
フロントエンドでブロックチェーンと繋げるときに使われる！

・truffle develop .. ローカルブロックチェーン軌道
truffle developモードではJSコードが使える様になる

accounts[0] .. 1０個あるアカウントの１番目を表示

let balance = await web3.eth.getBalance(accounts[0])
balance .. wei表記で残高を表示！
Number(balance) / 10 * 18 .. Eth表記！


migrationsフォルダにはデプロイされる順番がある。
1_initial_migration.js　は　初期化用のMigrationsファイルだから放置

migrationsファイルをかけたら migrate　コマンド実行(デプロイコマンド)

--terminal--
const dex = await Dex.deployed() // Instance取得
const comp = await ERC20.deployed() // Instance取得
const link = await ERC20.at("<Link Contract Address>")// Instance取得
const dai = await ERC20.at("<Dai Contract Address>")// Instance取得
dai.name() // Dai
let totalsupply = await dai.totalsupply()


-- ganache --
add workspace → truffle.config.js save workspace を追加する。
Terminalのtruffle develop を終了してしまうとまた、デプロイからになる。。
それを防ぐ！

truffle.config.jsの
    development: {
     host: "127.0.0.1",     // Localhost (default: none)
     port: 8545,            // Standard Ethereum port (default: none)
     network_id: "*",       // Any network (default: none)
    },
と、GanacheのRPC Serverを合わせる。（host / port ）

下でTruffleでデプロイしたブロックチェーンとGanacheが連携？　Ganache側できちんとEthが減っている！！
--
truffle console
→
migrate
再デプロイ
migrate --reset
--

---
test.js をテストするコマンド
test
---